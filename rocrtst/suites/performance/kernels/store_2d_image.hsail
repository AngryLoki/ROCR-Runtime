module &m:1:0:$full:$large:$default;
extension "amd:gcn";
extension "IMAGE";

decl prog function &abort()();

prog kernel &__OpenCL_store_2d_image_kernel(
    kernarg_rwimg %output,
	kernarg_u32 %istart,
	kernarg_u32 %iend,
	kernarg_u32 %istep)
{
	pragma  "AMD RTI", "ARGSTART:__OpenCL_store_2d_image_kernel";
	pragma  "AMD RTI", "version:3:1:104";
	pragma  "AMD RTI", "device:generic";
	pragma  "AMD RTI", "uniqueid:1024";
	pragma  "AMD RTI", "function:1:0";
	pragma  "AMD RTI", "memory:64bitABI";
	pragma  "AMD RTI", "uavid:8";
	pragma  "AMD RTI", "privateid:8";
	pragma  "AMD RTI", "ARGEND:__OpenCL_store_2d_image_kernel";

@__OpenCL_store_2d_image_kernel_entry:
	// BB#0:                                // %entry
	workitemabsid_u32	$s0, 1;
	workitemabsid_u32	$s1, 0;
    ld_kernarg_rwimg $d5, [%output];
	ld_kernarg_u32 $s2, [%istart];
	ld_kernarg_u32 $s3, [%iend];
	ld_kernarg_u32 $s4, [%istep];
	
	mov_b32	$s5, 0;
@loop:
    add_u32 $s2, $s2, $s4;
    add_u32 $s5, $s5, 1;
	stimage_v4_2d_u32_rwimg_u32	($s5, $s5, $s5, $s5), $d5, ($s1, $s0);
    
	//force to retrieve different image elements
	add_u32 $s1, $s1, 64;
	and_b32 $s1, $s1, 255;
	add_u32 $s0, $s0, 64;
	and_b32 $s0, $s0, 255;

    add_u32 $s5, $s5, $s2;
	stimage_v4_2d_u32_rwimg_u32	($s5, $s5, $s5, $s5), $d5, ($s1, $s0);
	
	//force to retrieve different image elements
	add_u32 $s1, $s1, 64;
	and_b32 $s1, $s1, 255;
	add_u32 $s0, $s0, 64;
	and_b32 $s0, $s0, 255;

    add_u32 $s5, $s5, $s2;
	stimage_v4_2d_u32_rwimg_u32	($s5, $s5, $s5, $s5), $d5, ($s1, $s0);
	
	//force to retrieve different image elements
	add_u32 $s1, $s1, 64;
	and_b32 $s1, $s1, 255;
	add_u32 $s0, $s0, 64;
	and_b32 $s0, $s0, 255;

    add_u32 $s5, $s5, $s2;
	stimage_v4_2d_u32_rwimg_u32	($s5, $s5, $s5, $s5), $d5, ($s1, $s0);
	
	//force to retrieve different image elements
	add_u32 $s1, $s1, 64;
	and_b32 $s1, $s1, 255;
	add_u32 $s0, $s0, 64;
	and_b32 $s0, $s0, 255;

    add_u32 $s5, $s5, $s2;
	stimage_v4_2d_u32_rwimg_u32	($s5, $s5, $s5, $s5), $d5, ($s1, $s0);
	
	//force to retrieve different image elements
	add_u32 $s1, $s1, 64;
	and_b32 $s1, $s1, 255;
	add_u32 $s0, $s0, 64;
	and_b32 $s0, $s0, 255;

    add_u32 $s5, $s5, $s2;
	stimage_v4_2d_u32_rwimg_u32	($s5, $s5, $s5, $s5), $d5, ($s1, $s0);
	
	//force to retrieve different image elements
	add_u32 $s1, $s1, 64;
	and_b32 $s1, $s1, 255;
	add_u32 $s0, $s0, 64;
	and_b32 $s0, $s0, 255;

    add_u32 $s5, $s5, $s2;
	stimage_v4_2d_u32_rwimg_u32	($s5, $s5, $s5, $s5), $d5, ($s1, $s0);
	
	//force to retrieve different image elements
	add_u32 $s1, $s1, 64;
	and_b32 $s1, $s1, 255;
	add_u32 $s0, $s0, 64;
	and_b32 $s0, $s0, 255;

    add_u32 $s5, $s5, $s2;
	stimage_v4_2d_u32_rwimg_u32	($s5, $s5, $s5, $s5), $d5, ($s1, $s0);

//loop until we hit condition
    cmp_lt_b1_u32 $c0, $s2, $s3;
	cbr_b1 $c0, @loop;
	ret;
};

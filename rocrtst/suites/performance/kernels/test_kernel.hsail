module &m:1:0:$full:$large:$default;
extension "amd:gcn";
extension "IMAGE";

decl prog function &abort()();

prog kernel &__OpenCL_vec_assign_kernel(
	kernarg_u64 %buf,
	kernarg_u32 %num)
{
	pragma  "AMD RTI", "ARGSTART:__OpenCL_vec_assign_kernel";
	pragma  "AMD RTI", "version:3:1:104";
	pragma  "AMD RTI", "device:generic";
	pragma  "AMD RTI", "uniqueid:1024";
	pragma  "AMD RTI", "function:1:0";
	pragma  "AMD RTI", "memory:64bitABI";
	pragma  "AMD RTI", "uavid:8";
	pragma  "AMD RTI", "privateid:8";
	pragma  "AMD RTI", "ARGEND:__OpenCL_vec_assign_kernel";

@__OpenCL_vec_assign_kernel_entry:
	// BB#0:                                // %entry
	ld_kernarg_align(8)_width(all)_u64	$d0, [%buf];
	ld_global_u32	$s1, [$d0];
	ld_kernarg_align(4)_width(all)_u32	$s0, [%num];
	cmp_ge_b1_s32	$c0, $s1, $s0;
	cbr_b1	$c0, @BB0_4;
	// BB#1:                                // %while.body.lr.ph
	workitemabsid_u32	$s1, 0;
	cmp_eq_b1_s32	$c0, $s1, 0;
	cbr_b1	$c0, @BB0_2;

@BB0_3:
	// %while.cond.backedge
	ld_global_u32	$s1, [$d0];
	cmp_lt_b1_s32	$c0, $s1, $s0;
	cbr_b1	$c0, @BB0_3;
	br	@BB0_4;

@BB0_2:
	// %while.cond.backedge.us
	ld_global_u32	$s1, [$d0];
	add_u32	$s1, $s1, 1;
	st_global_u32	$s1, [$d0];
	ld_global_u32	$s1, [$d0];
	cmp_lt_b1_s32	$c0, $s1, $s0;
	cbr_b1	$c0, @BB0_2;

@BB0_4:
	// %while.end
	ret;
};

